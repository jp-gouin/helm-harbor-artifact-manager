---
## Number of i3s-backends-validator images
replicaCount: 1
global:
  imageRegistry: myRegistry
#   imagePullSecrets:
#     - myRegistryKeySecretName

## Set default image, imageTag, and imagePullPolicy. mode is used to indicate the
##
image:
  repository: harbor-artifact-manager
  tag: latest
  pullPolicy: IfNotPresent
  pullSecret: harbor

## Default values for i3s-backends-validator.
## Existing secret with a key login and the password of the Harbor user defined
harborURI: "https://harbor.example.org/api/"
harborUser: "admin"
secret: "validator"


## Expose the i3s-backends-validator service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: ClusterIP
  ## name: i3s-backends-validator
  port: 80
  annotations: {}

  ## Set the LoadBalancer service type to internal only.
  ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
  ##
  # loadBalancerIP:

  ## Load Balancer sources
  ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
  ##
  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

## Configure Ingress based on the documentation here: https://kubernetes.io/docs/concepts/services-networking/ingress/
##

## Enable the ldap authentication
ldap:
  enabled: true
  host: ""
  port: 636
  base: ""
  binddn: ""
  bindpwd: ""
  ssl: true
  insecureSkipVerify: true

#Used only if ldap authentication disabled
adminUsername: "admin"
adminPassword: "Not@SecurePassword"

#Token use to generate jwt token
jwtApiKey: "Not-@-S3cure-K3y"

cm: 
  script: 
    backends-save-images.sh: |
      #!/bin/bash
      list=@repoList
      charts=@chartList
      images="backends-images.tar"
      user="admin"
      password="password"
      #POSITIONAL=()
      while [[ $# -gt 0 ]]; do
      key="$1"
      case $key in
        -i|--images)
        images="$2"
        shift # past argument
        shift # past value
        ;;
        -l|--image-list)
        list="$2"
        shift # past argument
        shift # past value
        ;;
        -h|--help)
        help="true"
        shift
        ;;
        -u|--user)
        user="$2"
        shift # past argument
        shift # past value
        ;;
        -p|--password)
        password="$2"
        shift # past argument
        shift # past value
        ;;
      esac
      done
      usage () {
      echo "USAGE: $0 [--images rancher-images.tar.gz]"
      echo "  [-l|--images-list path] text file with list of images. 1 per line."
      echo "  [-l|--images path] tar.gz generated by docker save."
      echo "  [-u|--user username] user to logon Harbor"
      echo "  [-p|--password password] password for harbor user"
      echo "  [-h|--help] Usage message"
      }
      if [[ $help ]]; then
      usage
      exit 0
      fi
      mkdir -p deliveries
      cd deliveries
      echo "Start saving docker images"
      docker login -u ${user} -p${password}
      for i in "${list[@]}"; do
      docker pull ${i}
      done
      docker save $(echo "${list[@]}" | tr '\n' ' ') | gzip -c > ${images}
      echo "start saving charts"
      for i in "${charts[@]}"; do
      curl --user ${user}:${password} ${i} --output $(echo ${i}| rev | cut -d/ -f1 | rev)
      done
      cd ..
      tar czf deliveries.tar.gz deliveries
ingress:
  enabled: false
  annotations: {}
  path: /
  ## Ingress Host
  hosts:
  - backends-validator.v2.rancher.geohub.space
  #
  tls: []
  # tls:
  # - secretName: i3s-backends-validator-dedicated-tls
  #   hosts:
  #   - i3s-backends-validator.example.org

## Configure liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
readinessProbe:
  httpGet:
    path: /
    port: http
livenessProbe:
   httpGet:
     path: /
     port: http

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

#Enable the etcd database : mandatory
# TODO : external database
etcd: 
  enabled: true
  statefulset:
    ## Number od replicas
    ##
    replicaCount: 3
